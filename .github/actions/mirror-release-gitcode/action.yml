name: 'Mirror Release to GitCode'
description: 'Mirror the Github Release to GitCode.'

inputs:
  gitcode-username:
    description: 'GitCode username to upload release assets.'
    required: true
  gitcode-password:
    description: 'GitCode password to login GitCode.'
    required: true
  gitcode-token:
    description: 'GitCode token to upload release assets.'
    required: true
  gitcode-repository:
    description: 'Target GitCode repository, inform of "owner/name", usually the same as Source Github repository.'
    required: false
    default: ''
  max-releases: 
    description: 'Numer of the latest releases to mirror.'
    required: false
    default: '1'
  github-token:
    description: 'Github token to donwload releases from Github repository, usually inherit from the composition action.'
    required: false
    default: ''
  github-repository:
    description: 'Source Github repository, inform of "owner/name", usually inherit from the composition action.'
    required: false
    default: ''
  dry-run:
    description: 'Skip writing operations.'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Sync
      shell: bash
      env:
        GITCODE_USERNAME: "${{ inputs.gitcode-username }}"
        GITCODE_PASSWORD: "${{ inputs.gitcode-password }}"
        GITCODE_TOKEN: "${{ inputs.gitcode-token }}"
        GITCODE_REPOSITORY: "${{ inputs.gitcode-repository && inputs.gitcode-repository || (inputs.github-repository && inputs.github-repository || github.repository) }}"
        MAX_RELEASES: "${{ inputs.max-releases }}"
        GITHUB_TOKEN: "${{ inputs.github-token && inputs.github-token || github.token }}"
        GITHUB_REPOSITORY: "${{ inputs.github-repository && inputs.github-repository || github.repository }}"
        DRY_RUN: "${{ inputs.dry-run == 'true' }}"
      run: |
        #!/usr/bin/env bash
          
        set -e
        
        shopt -s expand_aliases
        alias gh="gh --repo ${GITHUB_REPOSITORY}"
        alias curl="curl --insecure --silent --retry 3 --header 'Accept: application/json' --header 'Referer: https://gitcode.com' --user-agent 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36'"
        alias jq="jq -c"
        
        info() {
          echo "[INFO] $*"
        }
        warn() {
          echo "[WARN] $*"
        }
        error() {
          echo "[ERRO] $*"
        }
        fatal() {
          echo "[FATA] $*"
          exit 1
        }

        GITCODE_REPOSITORY_OWNER="$(echo "${GITCODE_REPOSITORY}" | cut -d'/' -f1)"
        GITCODE_REPOSITORY_NAME="$(echo "${GITCODE_REPOSITORY}" | cut -d'/' -f2)"
        
        info "Syncing GitCode repository..."
        # create gitcode remote if not exists
        if [[ "$(curl -o /dev/null -w %{http_code} -I https://api.gitcode.com/api/v5/repos/${GITCODE_REPOSITORY}\?access_token=${GITCODE_TOKEN})" == "404" ]]; then
          info "Creating GitCode repository ${GITCODE_REPOSITORY}..."
          if [[ "${DRY_RUN}" == "false" ]]; then
            if [[ ! "$(curl -o /tmp/error.log -w %{http_code} -X POST -F "access_token=${GITCODE_TOKEN}" -F "name=${GITCODE_REPOSITORY_NAME}" -F "private=false" -F "has_wiki=false" https://api.gitcode.com/api/v5/orgs/${GITCODE_REPOSITORY_OWNER}/repos)" =~ ^20.* ]]; then
              fatal "Failed to create GitCode repository ${GITCODE_REPOSITORY}: $(cat /tmp/error.log)."
            fi
          fi
          info "GitCode repository ${GITCODE_REPOSITORY} created."
        else
          info "GitCode repository ${GITCODE_REPOSITORY} already exists."
        fi
        
        info "Pushing to GitCode repository..."
        if [[ "${DRY_RUN}" == "false" ]]; then
          # add gitcode remote
          git remote add gitcode https://${GITCODE_USERNAME}:${GITCODE_TOKEN}@gitcode.com/${GITCODE_REPOSITORY}.git
          # push to gitcode
          git push gitcode --all --force
          git push gitcode --tags --force
        fi
        
        info "Releasing to GitCode repository..."
        # oauth login to get token
        info "  Logging in to GitCode..."
        if [[ ! "$(curl -c /tmp/login.cookie -o /tmp/error.log -w %{http_code} -X POST -F "username=${GITCODE_USERNAME}" -F "password=${GITCODE_PASSWORD}" https://web-api.gitcode.com/uc/api/v1/user/oauth/login)" =~ ^20.* ]]; then
            fatal "  Failed to login to GitCode: $(/tmp/error.log)."
        fi
        # create gitcode release if not exists
        gh release list --json name,tagName,isPrerelease,isDraft --order desc --limit ${MAX_RELEASES} | jq -r 'reverse | .[]' | while read -r release; do
          RELEASE_IS_PRERELEASE=$(echo "${release}" | jq -r '.isPrerelease')
          RELEASE_NAME=$(echo "${release}" | jq -r '.name')
          RELEASE_TAG_NAME=$(echo "${release}" | jq -r '.tagName')
          if [[ "$(echo "${release}" | jq -r '.isDraft')" == "true" ]]; then
            warn "  Skipped creating invalid release ${RELEASE_TAG_NAME}, continue..."
            continue
          fi
          GITCODE_REPOSITORY_URLENCODED=$(echo "${GITCODE_REPOSITORY}" | sed 's/\//%2F/g')
          if [[ "$(curl -b /tmp/login.cookie -o /dev/null -w %{http_code} -X GET https://web-api.gitcode.com/api/v2/projects/${GITCODE_REPOSITORY_URLENCODED}/releases/${RELEASE_TAG_NAME})" != "404" ]]; then
            info "GitCode release ${RELEASE_TAG_NAME} already exists."
            continue
          fi
        
          info "  Creating GitCode release ${RELEASE_TAG_NAME}..."
          gh release view ${RELEASE_TAG_NAME} --json assets,targetCommitish > /tmp/resp-view-release.json
          RELEASE_TARGET_COMMITISH=$(cat /tmp/resp-view-release.json | jq -r '.targetCommitish')
          # download assets
          info "    Downloading assets..."
          gh release download ${RELEASE_TAG_NAME} --dir /tmp/${RELEASE_TAG_NAME} >/dev/null && ls -lh /tmp/${RELEASE_TAG_NAME}/*
          cat <<EOF > /tmp/req-create-release.json
        {
          "repoId": "${GITCODE_REPOSITORY_URLENCODED}",
          "assets": [],
          "links": [],
          "name": "${RELEASE_NAME}",
          "tag_name": "${RELEASE_TAG_NAME}",
          "description": "Synced from github.com/${GITHUB_REPOSITORY}/releases/tag/${RELEASE_NAME}.",
          "prerelease": ${RELEASE_IS_PRERELEASE},
          "ref": "${RELEASE_TARGET_COMMITISH}"
        }
        EOF
          # upload assets to gitcode
          info "    Uploading assets..."
          cat /tmp/resp-view-release.json | jq -r '.assets[]' | while read -r asset; do
            ASSET_NAME=$(echo "${asset}" | jq -r '.name')
            ASSET_SIZE=$(echo "${asset}" | jq -r '.size')
            info "      Uploading asset ${ASSET_NAME}..."
            # create upload url
            cat <<EOF > /tmp/req-create-upload-url.json
        {
          "project_id": "${GITCODE_REPOSITORY_URLENCODED}",
          "type": "RELEASE",
          "content_type": "",
          "file_name": "${ASSET_NAME}",
          "size": ${ASSET_SIZE}
        }
        EOF
            if [[ "${DRY_RUN}" == "false" ]]; then
              while [[ ! "$(curl -b /tmp/login.cookie -o /tmp/resp-create-upload-url.json -w %{http_code} -X POST -H "Content-Type: application/json" -d @/tmp/req-create-upload-url.json https://web-api.gitcode.com/api/v2/projects/${GITCODE_REPOSITORY_URLENCODED}/releases/upload)" =~ ^20.* ]]; do
                error "      Failed to create upload url for asset ${ASSET_NAME}: $(cat /tmp/resp-create-upload-url.json), retrying after 5m..."
                sleep 300
              done
              # update upload url
              ASSET_UPLOAD_URL=$(cat /tmp/resp-create-upload-url.json | jq -r 'keys[0]')
              ASSET_UPLOAD_X_OBS_ACL=$(cat /tmp/resp-create-upload-url.json | jq -r '.[keys[0]] | ."x-obs-acl"')
              ASSET_UPLOAD_X_OBS_CALLBACK=$(cat /tmp/resp-create-upload-url.json | jq -r '.[keys[0]] | ."x-obs-callback"')
              ASSET_UPLOAD_X_OBS_META_PROJECT_ID=$(cat /tmp/resp-create-upload-url.json | jq -r '.[keys[0]] | ."x-obs-meta-project-id"')
              ASSET_UPLOAD_ATTACHMENT_ID=$(cat /tmp/resp-create-upload-url.json | jq -r '.[keys[0]] | .attachment_id')
              ASSET_UPLOAD_CDN_ADDR=$(cat /tmp/resp-create-upload-url.json | jq -r '.[keys[0]] | ."cdn-addr"')
              while [[ ! "$(curl -o /tmp/error.log -w %{http_code} -H "X-Obs-Acl: ${ASSET_UPLOAD_X_OBS_ACL}" -H "X-Obs-Callback: ${ASSET_UPLOAD_X_OBS_CALLBACK}" -H "X-Obs-Meta-Project-Id: ${ASSET_UPLOAD_X_OBS_META_PROJECT_ID}" -X PUT -H "Content-Type: application/octet-stream" --data-binary @/tmp/${RELEASE_TAG_NAME}/${ASSET_NAME} ${ASSET_UPLOAD_URL})" =~ ^20.* ]]; do
                error "      Failed to upload asset ${ASSET_NAME}: $(cat /tmp/error.log), retrying after 10s..."
                sleep 10
              done
              cat /tmp/req-create-release.json | jq --argjson link "{\"action\":\"create\",\"attachment_id\":\"${ASSET_UPLOAD_ATTACHMENT_ID}\",\"url\":\"${ASSET_UPLOAD_CDN_ADDR}\",\"name\":\"${ASSET_NAME}\"}" '.links += [$link]' > /tmp/req-create-release.json.2 && mv -f /tmp/req-create-release.json.2 /tmp/req-create-release.json
            fi
            sleep 10
          done
          # create gitcode release
          if [[ "${DRY_RUN}" == "false" ]]; then
            while [[ ! "$(curl -b /tmp/login.cookie -o /tmp/error.log -w %{http_code} -X POST -H "Content-Type: application/json" -d @/tmp/req-create-release.json https://web-api.gitcode.com/api/v2/projects/${GITCODE_REPOSITORY_URLENCODED}/releases)" =~ ^20.* ]]; do
              error "  Failed to create GitCode release ${RELEASE_TAG_NAME}: $(cat /tmp/error.log), retrying after 10s..."
              sleep 10
            done
          fi
          info "  GitCode release ${RELEASE_TAG_NAME} created."
          # cleanup
          rm -rf /tmp/${RELEASE_TAG_NAME}
          info "GitCode release ${RELEASE_TAG_NAME} assets uploaded."
        done
